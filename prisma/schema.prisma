// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole
  contactNo  String
  address    String
  profileImg String   @default("")

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  orders           Order[]

  @@map("users")
}

enum UserRole {
  admin
  customer
}

model Category {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]

  @@map("categories")
}

model Book {
  id              String  @id @default(uuid())
  title           String
  author          String
  price           Decimal @default(0.00)
  genre           String
  publicationDate String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]

  @@map("books")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int    @default(0)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookId String
  book   Book   @relation(fields: [bookId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_and_ratings")
}

model Order {
  id           String      @id @default(uuid())
  status       OrderStatus @default(pending)
  orderedBooks Json

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

enum OrderStatus {
  pending
  shipped
  delivered
}
